AWSTemplateFormatVersion: '2010-09-09'
Description: 'EC2 configuration for NIM'

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetId:
    Type: AWS::EC2::Subnet::Id
  InstanceType:
    Type: String
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
  Repository:
    Type: String
    Description: NGC repository for the NIM container (e.g., nim/meta/llama3-8b-instruct)
  LatestTag:
    Type: String
    Description: Latest tag for the NIM container image
  NGCApiKeySecretName:
    Type: String
    Description: Name of the secret in AWS Secrets Manager that contains the NGC API Key
  CapacityReservationId:
    Type: String
    Default: ''
  LatestAmiId:
    Type: AWS::EC2::Image::Id
  ALBTargetGroupArn:
    Type: String
    Description: ARN of the ALB Target Group
    Default: ''
  PlacementGroupName:
    Type: String
    Description: Name of the placement group for high-performance networking
    Default: ''

Conditions:
  UseCapacityReservation: !Not [!Equals [!Ref CapacityReservationId, '']]
  AttachToALB: !Not [!Equals [!Ref ALBTargetGroupArn, '']]
  UsePlacementGroup: !Not [!Equals [!Ref PlacementGroupName, '']]

Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for NIM EC2 instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${NGCApiKeySecretName}*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  InstanceLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds: 
          - !Ref EC2SecurityGroup
        InstanceMarketOptions:
          MarketType: capacity-block
        CapacityReservationSpecification:
          !If
            - UseCapacityReservation
            - CapacityReservationTarget:
                CapacityReservationId: !Ref CapacityReservationId
            - CapacityReservationPreference: open
        BlockDeviceMappings:
          - DeviceName: /dev/sda1
            Ebs:
              VolumeSize: 1000
              VolumeType: gp3
              Iops: 16000
              Throughput: 1000
        EbsOptimized: true
        MetadataOptions:
          HttpTokens: required
          HttpPutResponseHopLimit: 2
        IamInstanceProfile:
          Arn: !GetAtt EC2InstanceProfile.Arn
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash

              # Enable exit on error and enable command printing for debugging
              set -ex

              # Function to log messages
              log_message() {
                  echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a /var/log/user-data.log /var/log/nim-install.log
              }

              log_message "Starting user-data script execution"

              # Update and install dependencies
              log_message "Updating package lists and installing dependencies"
              apt-get update >> /var/log/nim-install.log 2>&1
              apt-get install -y gcc unzip python3-pip >> /var/log/nim-install.log 2>&1

              # Install AWS CLI
              log_message "Installing AWS CLI"
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip" >> /var/log/nim-install.log 2>&1
              unzip awscliv2.zip >> /var/log/nim-install.log 2>&1
              ./aws/install >> /var/log/nim-install.log 2>&1

              # Install NVIDIA drivers and CUDA toolkit
              log_message "Installing NVIDIA drivers and CUDA toolkit"
              wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb >> /var/log/nim-install.log 2>&1
              dpkg -i cuda-keyring_1.1-1_all.deb >> /var/log/nim-install.log 2>&1
              apt-get update >> /var/log/nim-install.log 2>&1
              apt-get install -y cuda-toolkit-12-6 nvidia-open >> /var/log/nim-install.log 2>&1

              # Install Docker
              log_message "Installing Docker"
              apt-get install -y apt-transport-https ca-certificates curl software-properties-common >> /var/log/nim-install.log 2>&1
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add - >> /var/log/nim-install.log 2>&1
              add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" >> /var/log/nim-install.log 2>&1
              apt-get update >> /var/log/nim-install.log 2>&1
              apt-get install -y docker-ce docker-ce-cli containerd.io >> /var/log/nim-install.log 2>&1

              # Install NVIDIA Container Toolkit
              log_message "Installing NVIDIA Container Toolkit"
              curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg >> /var/log/nim-install.log 2>&1
              curl -s -L https://nvidia.github.io/libnvidia-container/stable/deb/nvidia-container-toolkit.list | \
                  sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
                  tee /etc/apt/sources.list.d/nvidia-container-toolkit.list >> /var/log/nim-install.log 2>&1
              apt-get update >> /var/log/nim-install.log 2>&1
              apt-get install -y nvidia-container-toolkit >> /var/log/nim-install.log 2>&1
              apt-get install cuda-drivers-fabricmanager-560 -y >> /var/log/nim-install.log 2>&1
              systemctl enable nvidia-fabricmanager >> /var/log/nim-install.log 2>&1
              systemctl start nvidia-fabricmanager >> /var/log/nim-install.log 2>&1

              # Configure Docker to use NVIDIA runtime
              log_message "Configuring Docker to use NVIDIA runtime"
              nvidia-ctk runtime configure --runtime=docker >> /var/log/nim-install.log 2>&1
              systemctl restart docker >> /var/log/nim-install.log 2>&1

              # Retrieve NGC API Key from Secrets Manager
              log_message "Retrieving NGC API Key from Secrets Manager"
              NGC_API_KEY=$(aws secretsmanager get-secret-value --secret-id ${NGCApiKeySecretName} --query SecretString --output text --region ${AWS::Region})

              # Set up and run the container
              log_message "Setting up and running the NIM container"
              
              # Create cache directory
              mkdir -p /home/ubuntu/.cache/nim
              chown ubuntu:ubuntu /home/ubuntu/.cache/nim

              # Login to NGC
              log_message "Logging in to NGC"
              echo $NGC_API_KEY | docker login nvcr.io -u '$oauthtoken' --password-stdin

              # Run the container
              log_message "Running the NIM container"
              docker run -d --restart unless-stopped --name=nim-container \
                --runtime=nvidia \
                --gpus all \
                -e NGC_API_KEY=$NGC_API_KEY \
                -v "/home/ubuntu/.cache/nim:/opt/nim/.cache" \
                -u $(id -u ubuntu) \
                -p 8000:8000 \
                nvcr.io/nim/${Repository}:${LatestTag}

              log_message "User-data script execution completed"

  NIMAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - !Ref SubnetId
      DesiredCapacity: 1
      MinSize: 0
      MaxSize: 1
      LaunchTemplate:
        LaunchTemplateId: !Ref InstanceLaunchTemplate
        Version: !GetAtt InstanceLaunchTemplate.LatestVersionNumber
      TargetGroupARNs: !If 
        - AttachToALB
        - - !Ref ALBTargetGroupArn
        - !Ref AWS::NoValue
      PlacementGroup: !If
        - UsePlacementGroup
        - !Ref PlacementGroupName
        - !Ref AWS::NoValue

Outputs:
  EC2SecurityGroupId:
    Description: The ID of the EC2 Security Group
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-EC2SecurityGroupId"
  ASGName:
    Description: The name of the Auto Scaling Group
    Value: !Ref NIMAutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASGName"
  EC2InstanceRoleArn:
    Description: The ARN of the EC2 Instance Role
    Value: !GetAtt EC2InstanceRole.Arn
    Export:
      Name: !Sub "${AWS::StackName}-EC2InstanceRoleArn"